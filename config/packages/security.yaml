security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        my_custom_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider:  my_custom_provider
            custom_authenticator: App\Security\UserAuthanticatorAuthenticator
            entry_point: security.authenticator.guard.main.0  # Référence à votre premier authenticator
            logout:
                path: app_logout
                # where to redirect after logout
                target: app_register

            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800
                path: /
                always_remember_me: true

            guard:
                authenticators:
                    - App\Security\GoogleAuthentificator



            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
    # - { path: ^/admin, roles: ROLE_ADMIN }
    # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # Use native password hasher, which auto-selects and migrates the best
            # possible hashing algorithm (which currently is "bcrypt")
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

