{# <!DOCTYPE html> #}
{# <html> #}
{# <head> #}
{#    <title>Google Maps Example</title> #}

{#    <script async defer #}
{#            src="https://maps.googleapis.com/maps/api/js?key={{ google_maps_api_key }}&libraries=places"> #}
{#    </script> #}
{# </head> #}
{# <body> #}
{# <div id="map" style="width: 100%; height: 400px;"></div> #}

{# <script> #}
{#    // JavaScript code to initialize the map, handle user interaction, and perform geocoding #}
{#    const map = {{ map|raw }}; #}
{#    map.appendTo('#map'); // Render the map in the div with ID "map" #}

{#    // Add event listeners for user interaction (e.g., marker placement, dragging) #}
{#    // ... #}

{#    // Use the Google Maps Geocoding API to reverse-geocode captured coordinates #}
{#    // ... #}
{# </script> #}
{# </body> #}
{# </html> #}
{# <!DOCTYPE html>
<html>
<head>
    <title>Simple Marker</title>
    <!-- The callback parameter is required, so we use console.debug as a noop -->
    <script async
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBMcmjzku57fdDvIj1zAc8yGIUaD15lKUg&callback=console.debug&libraries=maps,marker&v=beta">
    </script>
    <style>
        /* Always set the map height explicitly to define the size of the div
         * element that contains the map. */
        gmp-map {
            height: 100%;
        }

        /* Optional: Makes the sample page fill the window. */
        html,
        body {
            height: 100%;
            margin: 0;
            padding: 0;
        }
    </style>
</head>
<body>
    <gmp-map center="36.81023025512695,10.161048889160156" zoom="14" map-id="DEMO_MAP_ID">
    <gmp-advanced-marker position="36.81023025512695,10.161048889160156" title="My location">

    </gmp-advanced-marker>
</gmp-map>
</body>
</html> #}


<!DOCTYPE html>
<!--
 @license
 Copyright 2019 Google LLC. All Rights Reserved.
 SPDX-License-Identifier: Apache-2.0
-->
<html>
<head>
    <title>Place Autocomplete</title>
    <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
    <script>
        /**
         * @license
         * Copyright 2019 Google LLC. All Rights Reserved.
         * SPDX-License-Identifier: Apache-2.0
         */
        // This example requires the Places library. Include the libraries=places
        // parameter when you first load the API. For example:
        // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">


        function initMap() {
            const map = new google.maps.Map(document.getElementById("map"), {
                center: {lat: 34.28091343530563, lng: 9.391573951354815},
                zoom: 7,
                mapTypeControl: true,
            });

            const card = document.getElementById("pac-card");
            const input = document.getElementById("pac-input");
            const biasInputElement = document.getElementById("use-location-bias");

            const strictBoundsInputElement =
                document.getElementById("use-strict-bounds");
            const options = {
                fields: ["formatted_address", "geometry", "name"],
                strictBounds: false,
            };

            map.controls[google.maps.ControlPosition.TOP_LEFT].push(card);

            const autocomplete = new google.maps.places.Autocomplete(
                input,
                options
            );


            let markers = []; // Array to store created markers
            const infoWindow = new google.maps.InfoWindow();
            const geocoder = new google.maps.Geocoder();


            map.addListener('click', function (event) {
                const clickedLatLng = event.latLng;
                console.log('Clicked Lat:', clickedLatLng.lat(), 'Lng:', clickedLatLng.lng());


                const marker = new google.maps.Marker({
                    position: clickedLatLng,
                    icon: {
                        url: '{{ asset('images/user/markep.png') }}',
                        scaledSize: new google.maps.Size(32, 32)
                    }
                });

                marker.setMap(map);
                markers.push(marker); // Add the marker to the array
                if (markers.length > 1) {
                    markers[markers.length - 2].setMap(null); // Remove previous marker
                }



                geocoder.geocode({location: clickedLatLng}, function (results, status) {
                    if (status === google.maps.GeocoderStatus.OK) {
                        if (results[0]) {
                            const placeName = results[0].formatted_address;
                            const addressComponents = results[0].address_components;


                            const content= `
                    <div id="bubbleInfo" >
                        <h4>` + placeName + `</h4>

                            </div>
                        `;

                            infoWindow.setPosition(clickedLatLng);
                            infoWindow.setContent(content);
                            infoWindow.open(map);
                        }
                    }
                });

                // ... (create a marker as described in the previous response)

                // Prepare info window content (e.g., place name, address)


                // Open the info window at the clicked location


            });

            infoWindow.setOptions({
                maxWidth: 200, // Maximum width of the info window
                pixelOffset: new google.maps.Size(0, -30) // Adjust position relative to marker
            });


            // Bind the map's bounds (viewport) property to the autocomplete object,
            // so that the autocomplete requests use the current map bounds for the
            // bounds option in the request.
            autocomplete.bindTo("bounds", map);

            const infowindow = new google.maps.InfoWindow();
            const infowindowContent = document.getElementById("infowindow-content");

            infowindow.setContent(infowindowContent);

            const marker = new google.maps.Marker({
                map,
                anchorPoint: new google.maps.Point(0, -29),
            });

            autocomplete.addListener("place_changed", () => {
                infowindow.close();
                marker.setVisible(false);

                const place = autocomplete.getPlace();

                if (!place.geometry || !place.geometry.location) {
                    // User entered the name of a Place that was not suggested and
                    // pressed the Enter key, or the Place Details request failed.
                    window.alert(
                        "No details available for input: '" + place.name + "'"
                    );
                    return;
                }

                // If the place has a geometry, then present it on a map.
                if (place.geometry.viewport) {
                    map.fitBounds(place.geometry.viewport);
                } else {
                    map.setCenter(place.geometry.location);
                    map.setZoom(17);
                }

                marker.setPosition(place.geometry.location);
                marker.setVisible(true);
                infowindowContent.children["place-name"].textContent = place.name;
                infowindowContent.children["place-address"].textContent =
                    place.formatted_address;
                infowindow.open(map, marker);
            });

            // Sets a listener on a radio button to change the filter type on Places
            // Autocomplete.
            // function setupClickListener(id, types) {
            //     const radioButton = document.getElementById(id);
            //
            //     radioButton.addEventListener("click", () => {
            //         autocomplete.setTypes(types);
            //         input.value = "";
            //     });
            // }
            //
            // setupClickListener("changetype-all", []);
            // setupClickListener("changetype-address", ["address"]);
            // setupClickListener("changetype-establishment", ["establishment"]);
            // setupClickListener("changetype-geocode", ["geocode"]);
            // setupClickListener("changetype-cities", ["(cities)"]);
            // setupClickListener("changetype-regions", ["(regions)"]);

            biasInputElement.addEventListener("change", () => {
                if (biasInputElement.checked) {
                    autocomplete.bindTo("bounds", map);
                } else {
                    // User wants to turn off location bias, so three things need to happen:
                    // 1. Unbind from map
                    // 2. Reset the bounds to whole world
                    // 3. Uncheck the strict bounds checkbox UI (which also disables strict bounds)
                    autocomplete.unbind("bounds");
                    autocomplete.setBounds({
                        east: 180,
                        west: -180,
                        north: 90,
                        south: -90,
                    });
                    strictBoundsInputElement.checked = biasInputElement.checked;
                }

                input.value = "";
            });
            strictBoundsInputElement.addEventListener("change", () => {
                autocomplete.setOptions({
                    strictBounds: strictBoundsInputElement.checked,
                });
                if (strictBoundsInputElement.checked) {
                    biasInputElement.checked = strictBoundsInputElement.checked;
                    autocomplete.bindTo("bounds", map);
                }

                input.value = "";
            });
        }

        window.initMap = initMap;
    </script>
    <style>
        /**
         * @license
         * Copyright 2019 Google LLC. All Rights Reserved.
         * SPDX-License-Identifier: Apache-2.0
         */
        /*
         * Always set the map height explicitly to define the size of the div element
         * that contains the map.
         */
        #map {
            height: 100%;
        }

        /*
         * Optional: Makes the sample page fill the window.
         */
        html,
        body {
            height: 100%;
            margin: 0;
            padding: 0;
        }

        #description {
            font-family: Roboto;
            font-size: 15px;
            font-weight: 300;
        }

        #infowindow-content .title {
            font-weight: bold;
        }

        #infowindow-content {
            display: none;
        }

        #map #infowindow-content {
            display: inline;
        }

        .pac-card {
            background-color: #fff;
            border-radius: 2px;
            box-shadow: 0 1px 4px -1px rgba(0, 0, 0, 0.3);
            margin: 10px;
            font: 400 18px Roboto, Arial, sans-serif;
            overflow: hidden;
            /*font-family: Roboto;*/

            min-height: 30px;
        }

        #pac-container {
            min-height: 40px;
        }

        .pac-controls {
            display: inline-block;
            padding: 5px 11px;
        }

        .pac-controls label {
            font-family: Roboto;
            font-size: 13px;
            font-weight: 300;
        }

        #pac-input {
            display: block;
            background-color: #fff;
            font-family: Roboto;
            font-size: 15px;
            font-weight: 300;
            /*margin-left: 12px;*/
            padding: 0 11px 0 13px;
            text-overflow: ellipsis;
            width: 400px;
            min-height: 30px;
        }

        #pac-input:focus {
            border-color: #4d90fe;
        }

        #title {
            color: #fff;
            background-color: #4d90fe;
            font-size: 25px;
            font-weight: 500;
            padding: 6px 12px;
        }

        #bubbleInfo {
            background-color: red;
        }

        input[type=text] {
            background-color: #fff;
            border: 0;
            border-radius: 2px;
            box-shadow: 0 1px 4px -1px rgba(0, 0, 0, 0.3);
            padding: 0 0.5em;
            font: 400 18px Roboto, Arial, sans-serif;
            overflow: hidden;
            line-height: 40px;
            min-width: 400px;
            margin: 1px ;
        }

        input[type=button] {
            background-color: #fff;
            border: 0;
            border-radius: 2px;
            box-shadow: 0 1px 4px -1px rgba(0, 0, 0, 0.3);
            margin: 10px;
            padding: 0 0.5em;
            font: 400 18px Roboto, Arial, sans-serif;
            overflow: hidden;
            height: 40px;
            cursor: pointer;
            margin-left: 5px;
        }
        input[type=button]:hover {
            background: rgb(235, 235, 235);
        }
        input[type=button].button-primary {
            background-color: #1a73e8;
            color: white;
        }
        input[type=button].button-primary:hover {
            background-color: #1765cc;
        }
        input[type=button].button-secondary {
            background-color: white;
            color: #1a73e8;
        }
        input[type=button].button-secondary:hover {
            background-color: #d2e3fc;
        }
    </style>
</head>
<body>

<div class="pac-card" id="pac-card">
    <input id="pac-input" type="text" placeholder="Enter a location"/>
</div>
<div id="map"></div>
<div id="infowindow-content">
    <span id="place-name" class="title"></span><br/>
    <span id="place-address"></span>
</div>

<script
        src="https://maps.googleapis.com/maps/api/js?key=&callback=initMap&libraries=places&v=weekly&solution_channel=GMP_CCS_autocomplete_v1"
        defer
></script>
</body>
</html>
